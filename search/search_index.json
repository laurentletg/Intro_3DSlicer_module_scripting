{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"3D Slicer homemade documentation","text":""},{"location":"#installing-slicer-and-the-brats_annotation-module-work-in-progress","title":"Installing Slicer and the BraTS_annotation module (work-in-progress)","text":"<ol> <li>Download 3D slicer</li> <li>Enable developer mode (Edit &gt; Application Settings &gt; Developer &gt; Check Enable developer mode). Slicer will restart. </li> <li>Clone (or download) this repository</li> <li>Activate the checkbox <code>Enable developer mode</code> in <code>Edit -&gt; Application Settings -&gt; Developer -&gt; Enable developer mode</code>. </li> <li>Add the path of this repository in <code>Edit -&gt; Application Settings -&gt; Modules -&gt; Additional module paths</code>. Slicer must be restarted.</li> <li>If the module appears in red, this is typically because there is a bug in the .py file. You can check for a traceback in the python console embeded in 3D Slicer. </li> <li>Potential issue with Qt (3D Slicer splash screen appears and disappears, fail to load) : this happens if Qt is not installed on your system (e.g on a new Linux install) : example of Qt install on Ubuntu </li> </ol>"},{"location":"#official-slicer-ressources","title":"Official Slicer ressources","text":"<ul> <li>Main page</li> <li>Download page</li> <li>Documentation</li> <li>Developer guide</li> <li>Discourse</li> </ul>"},{"location":"#python-programing-in-slicer","title":"Python programing in Slicer","text":"<p>The Slicer python API is not fully documented but slowly improving including here. I usually try first with the script repository or discourse forum. For the segmentation editor module you can find methods in this page. Trying to find methods using tab completion sometimes work in combination with the official C++ API. A debugging tool exists, I was only able to make it work with VSCode not PyCharm.  ChatGPT is hit or miss, sometimes come up with hallucinated functions. </p> <ul> <li>Slicer Programming Tutorial</li> <li>Beyond the basics programming</li> <li>Python script repository</li> <li>Script repository</li> <li>Slicer API (C++)</li> </ul>"},{"location":"#slicer-jupyter","title":"Slicer Jupyter","text":"<p>Useful for prototyping and exploring the python API</p> <ul> <li>Overview on github</li> <li>Jupyter notebook examples</li> <li>Other segmentation examples</li> </ul>"},{"location":"#slicer-module-development","title":"Slicer module development","text":"<p>In order of difficulty/complexity:</p> <ul> <li>Basic Python module (Hello python)</li> <li>Robarts lab documentation including well documented example </li> <li>PerkLab python module development tutorial (includes Qt designer)</li> <li>Developing and contributing extensions for 3D Slicer</li> </ul>"},{"location":"#videos-and-other-ressources","title":"Videos and other ressources","text":"<ul> <li>Module development series</li> <li>Short series showing basic python programming and module development (in German with English subtitles)</li> </ul>"},{"location":"#python-module-examples","title":"Python module examples","text":"<ul> <li>Robarts lab good baseline code (without .ui file - requires manually editing the widgets in the .py file)</li> <li>Slicer Case Iterator: iterate through cases </li> </ul>"},{"location":"#misc-ressources","title":"Misc ressources","text":""},{"location":"#monai-label-3d-slicer-extension","title":"MONAI label (3D Slicer extension)","text":"<p>Active learning tool - DL assited annotation.</p> <ul> <li>MONAI label. </li> <li>MONAI label youtube - Overview</li> <li>MONAI label youtube - Set-up</li> <li>MONAI label github</li> </ul>"},{"location":"#pyqt","title":"PyQt","text":"<p>Building a GUI outside of Slicer (helps to understand how to build a GUI in Slicer) - PyQt tutorial - PyQt video series</p>"},{"location":"#code-repository","title":"Code repository","text":""},{"location":"Code_repository/","title":"Code repository","text":"<ul> <li>Segmentation</li> <li>Getting specific segments</li> <li>Changing the ID color based on completion status</li> <li>Subject hierarchy</li> <li>Save volume statistics</li> <li>Keyboard shortcuts from configuration file</li> </ul>"},{"location":"Code_repository/#layout","title":"Layout","text":""},{"location":"Code_repository/#compare-view-widescreen-with-1-row-and-2-columns-i-have-not-yet-figured-out-how-to-get-the-1x1-view","title":"Compare view widescreen (with 1 row and 2 columns). I have not yet figured out how to get the 1x1 view.","text":"<pre><code># Set to widescreen compare view\nlayoutManager = slicer.app.layoutManager()\nlayoutManager.setLayout(slicer.vtkMRMLLayoutNode.SlicerLayoutCompareWidescreenView)\n\n# Configure the layout to display 2 viewers in Compare Widescreen mode\nlayoutNode = slicer.app.layoutManager().layoutLogic().GetLayoutNode()\nlayoutNode.SetNumberOfCompareViewRows(1)  # 1 row\nlayoutNode.SetNumberOfCompareViewColumns(2)  # 2 columns\n</code></pre>"},{"location":"Code_repository/#subject-hierarchy","title":"Subject hierarchy","text":"<ul> <li>Subject hierarchy <p> <pre><code>import slicer\ndef subjectHierarchy(self):\n    # Get the subject hierarchy node\n    shNode = slicer.mrmlScene.GetSubjectHierarchyNode()\n\n    # Get scene item ID first because it is the root item:\n    sceneItemID = shNode.GetSceneItemID()\n    # Get the scene item ID (check if the scene item exists)\n    subjectItemID = shNode.GetItemChildWithName(shNode.GetSceneItemID(), self.currentCase)\n    if not subjectItemID:\n        subjectItemID = shNode.CreateSubjectItem(shNode.GetSceneItemID(), self.currentCase)\n\n    # TODO: this will need to be updated when moving to multiple studies per patient (or done in a separate script)\n    # Creat a folder to include a study (if more than one study)\n    # check if the folder exists and if not create it (avoid recreating a new one when reloading a mask)\n    Study_name = 'Study to be updated'\n    folderID = shNode.GetItemChildWithName(subjectItemID, Study_name)\n    if not folderID:\n        folderID = shNode.CreateFolderItem(subjectItemID, Study_name)\n    # set under the subject\n    shNode.SetItemParent(folderID, subjectItemID)\n\n    # get all volume nodes\n    VolumeNodes = slicer.util.getNodesByClass('vtkMRMLVolumeNode')\n    VolumeNodeNames = [i.GetName() for i in VolumeNodes]\n    # Get all child (itemID = CT or MR series/sequences)\n    for i in VolumeNodeNames:\n        itemID = shNode.GetItemChildWithName(sceneItemID, i)\n        shNode.SetItemParent(itemID, folderID)\n    # same thing for segmentation nodes\n    SegmentationNodes = slicer.util.getNodesByClass('vtkMRMLSegmentationNode')\n    SegmentationNodeNames = [i.GetName() for i in SegmentationNodes]\n    # move all segmentation nodes to the subject\n    for i in SegmentationNodeNames:\n        itemID = shNode.GetItemChildWithName(sceneItemID, i)\n        shNode.SetItemParent(itemID, folderID)\n</code></pre></p> </li> </ul>"},{"location":"Code_repository/#segmentation","title":"Segmentation","text":""},{"location":"Code_repository/#getting-specific-segments","title":"Getting specific segments","text":"<ul> <li>Hierarchical data structure of the segmentation node : SegmentationNode -&gt; Segmentation -&gt; Segment. The key is <code>segmentation.GetSegmentation().GetSegment(segmentname)</code></li> <li>Example on the script repository <pre><code>segmentation = slicer.util.getNode('Segmentation')\n#If the segment name is already known, you can get the segment by name:\nsegmentname = 'Segment_1'\n\n#Change the 3D display properties of the segmentation\ndisplayNode = segmentation.GetDisplayNode()\ndisplayNode.SetOpacity3D(0.9)  # Set overall opacity of the segmentation\ndisplayNode.SetSegmentOpacity3D(segmentname, 0.2)  # Set opacity of a single segment\n\n\n# Segment color is not just a display property, but it is stored in the segment itself (and stored in the segmentation file)\nsegment = segmentation.GetSegmentation().GetSegment(segmentname)\nsegment.SetColor(1, 0, 0)  # red\n</code></pre></li> </ul>"},{"location":"Code_repository/#changing-the-id-color-based-on-completion-status","title":"Changing the ID color based on completion status","text":"<pre><code>    def update_current_case_paths_by_segmented_volumes(self):\n        if not self.VolumeNode and not self.segmentationNode:\n            qt.QMessageBox.warning(None, 'No case selected', 'Please load volumes and segmentations first')\n            raise ValueError('No case selected')\n        print('coloring segmented volumes')\n        print(self.OutDir)\n        segmentations = glob(os.path.join(self.config['OutDir'], self.config['SEGM_FILE_TYPE']))\n        print(len(segmentations))\n        print(self.config['SEGM_REGEX'])\n        print(os.path.basename(segmentations[0]))\n        segmented_IDs = [re.findall(self.config['SEGM_REGEX'], os.path.basename(segmentation))[0] for segmentation in\n                         segmentations]\n\n        self.ui.SlicerDirectoryListView.clear()\n        for case in self.CasesPaths:\n            case_id = re.findall(self.config['VOL_REGEX'], case)[0]\n            item = qt.QListWidgetItem(case_id)\n            if not case_id in segmented_IDs:\n                item.setForeground(qt.QColor('red'))\n\n            elif case_id in segmented_IDs:\n                item.setForeground(qt.QColor('green'))\n            self.ui.SlicerDirectoryListView.addItem(item)\n</code></pre>"},{"location":"Code_repository/#nifti-updating-the-segment-names-and-color","title":"Nifti: Updating the segment names and color","text":"<p>e.g. import from nnUNet</p> <pre><code>    def convert_nifti_header_Segment(self):\n\n        # Check if the first segment starts with Segment_1 (e.g. loaded from nnunet).\n        # If so change the name and colors of the segments to match the ones in the config file\n        first_segment_name = self.segmentationNode.GetSegmentation().GetNthSegment(0).GetName()\n        print(f'first_segment_name :: {first_segment_name}')\n        if first_segment_name.startswith(\"Segment_\"):\n            # iterate through all segments and rename them\n\n            for i in range(self.segmentationNode.GetSegmentation().GetNumberOfSegments()):\n                segment_name = self.segmentationNode.GetSegmentation().GetNthSegment(i).GetName()\n                print(f' src segment_name :: {segment_name}')\n                for label in self.config_yaml[\"labels\"]:\n                    if label[\"value\"] == int(segment_name.split(\"_\")[-1]):\n                        self.segmentationNode.GetSegmentation().GetNthSegment(i).SetName(label['name'])\n                        # set color\n                        self.segmentationNode.GetSegmentation().GetNthSegment(i).SetColor(label[\"color_r\"] / 255,\n                                                                                          label[\"color_g\"] / 255,\n                                                                                          label[\"color_b\"] / 255)\n\n        self.add_missing_nifti_segment()\n\n    def add_missing_nifti_segment(self):\n        for label in self.config_yaml['labels']:\n            name = label['name']\n            segment_names = [self.segmentationNode.GetSegmentation().GetNthSegment(node).GetName() for node in\n                             range(self.segmentationNode.GetSegmentation().GetNumberOfSegments())]\n            if not name in segment_names:\n                self.segmentationNode.GetSegmentation().AddEmptySegment(name)\n                segmentid = self.segmentationNode.GetSegmentation().GetSegmentIdBySegmentName(name)\n                segment = self.segmentationNode.GetSegmentation().GetSegment(segmentid)\n                segment.SetColor(label[\"color_r\"] / 255,\n                                 label[\"color_g\"] / 255,\n                                 label[\"color_b\"] / 255)\n</code></pre>"},{"location":"Code_repository/#segment-qc","title":"Segment QC","text":""},{"location":"Code_repository/#save-volume-statistics","title":"Save volume statistics","text":"<pre><code>  def save_statistics(self):\n      volumeNode=slicer.util.getNodesByClass('vtkMRMLScalarVolumeNode')[0]\n      segmentationNode=slicer.util.getNodesByClass('vtkMRMLSegmentationNode')[0]\n      segmentationNode.SetReferenceImageGeometryParameterFromVolumeNode(volumeNode)\n      segStatLogic = SegmentStatistics.SegmentStatisticsLogic()\n      segStatLogic.getParameterNode().SetParameter(\"Segmentation\", segmentationNode.GetID())\n      segStatLogic.getParameterNode().SetParameter(\"ScalarVolume\", volumeNode.GetID())\n      segStatLogic.getParameterNode().SetParameter(\"LabelSegmentStatisticsPlugin.obb_origin_ras.enabled\",str(True))\n      segStatLogic.getParameterNode().SetParameter(\"LabelSegmentStatisticsPlugin.obb_diameter_mm.enables\",str(True))\n      segStatLogic.getParameterNode().SetParameter(\"LabelSegmentStatisticsPlugin.obb_direction_ras_x_.enabled\", str(True))\n      segStatLogic.getParameterNode().SetParameter(\"LabelSegmentStatisticsPlugin.obb_direction_ras_y_.enabled\",str(True))\n      segStatLogic.getParameterNode().SetParameter(\"LabelSegmentStatisticsPlugin.obb_direction_ras_z_.enabled\", str(True))\n      segStatLogic.getParameterNode().SetParameter(\"LabelSegmentStatisticsPLugin.obb_diameter_mm.enables\", str(True))\n      segStatLogic.computeStatistics()\n      output_file_pt_id_instanceUid = re.findall(self.VOL_REGEX_PATTERN_PT_ID_INSTUID_SAVE, os.path.basename(self.currentCasePath))[0]\n\n\n      outputFilename = f'Volumes_{output_file_pt_id_instanceUid}.csv'\n      output_dir_volumes_csv = os.path.join(self.output_dir_labels, 'csv_volumes')\n      output_dir_volumes_csv = os.path.join(self.output_dir_labels, 'csv_volumes')\n      outputFilename = os.path.join(output_dir_volumes_csv, outputFilename)\n\n      segStatLogic.exportToCSVFile(outputFilename)\n      stats = segStatLogic.getStatistics()\n\n      # Read the csv and clean it up\n      df = pd.read_csv(outputFilename)\n      df.set_index('Segment')\n      df = df[['Segment', 'LabelmapSegmentStatisticsPlugin.volume_cm3']]\n      df.rename(columns={'LabelmapSegmentStatisticsPlugin.volume_cm3': \"Volumes\"}, inplace=True)\n      df['ID'] = df['Segment'].str.extract(\"(ID_[a-zA-Z0-90]+)_\")\n      df['Category'] = df['Segment'].str.extract(\"_([A-Z]+)$\")\n\n      if not os.path.exists(output_dir_volumes_csv):\n          os.makedirs(output_dir_volumes_csv)\n\n\n      if not os.path.isfile(outputFilename):\n          df.to_csv(outputFilename, index=False)\n          print(f'Wrote segmentation file here {outputFilename}')\n      else:\n          msg = qt.QMessageBox()\n          msg.setWindowTitle('Save As')\n          msg.setText(f'The file {outputFilename} already exists \\n Do you want to replace the existing file?')\n          msg.setIcon(qt.QMessageBox.Warning)\n          msg.setStandardButtons(qt.QMessageBox.Ok | qt.QMessageBox.Cancel)\n          msg.exec()\n          if msg.clickedButton() == msg.button(qt.QMessageBox.Ok):\n              df.to_csv(outputFilename, index=False)\n              print(f'Wrote segmentation file here {outputFilename}')\n</code></pre>"},{"location":"Code_repository/#keyboard-shortcuts-from-configuration-file","title":"Keyboard shortcuts from configuration file","text":"<ul> <li>Pass the method name (without 'self.' and '()') and the keyboard shortcut. Make sure this does not conflict with the default shortcuts. <pre><code>KEYBOARD_SHORTCUTS: \n  - method: \"keyboard_toggle_fill\"\n    shortcut: \"d\"\n</code></pre> Corresponds to section in <code>SEGMENTER_V2Widget.setup()</code> immediately after the widget connections. Adapted from the 3D Slicer script repository <pre><code>    # KEYBOARD SHORTCUTS\n    keyboard_shortcuts = []\n    for i in self.config_yaml[\"KEYBOARD_SHORTCUTS\"]:\n        shortcutKey = i.get(\"shortcut\")\n        callback_name = i.get(\"method\")\n        callback = getattr(self, callback_name)\n        keyboard_shortcuts.append((shortcutKey, callback))\n\n    print(f'keyboard_shortcuts: {keyboard_shortcuts}')\n\n\n    for (shortcutKey, callback) in keyboard_shortcuts:\n        shortcut = qt.QShortcut(slicer.util.mainWindow())\n        shortcut.setKey(qt.QKeySequence(shortcutKey))\n        shortcut.connect(\"activated()\", callback)\n</code></pre> For buttons that 'toggles' this method was created:</li> <li>[ ] create a more general method that can be used for all buttons that toggle on and off. <pre><code>  def keyboard_toggle_fill(self):\n      print('keyboard_toggle_fill')\n      if self.ui.pushButton_ToggleFill.isChecked():\n          self.ui.pushButton_ToggleFill.toggle()\n          self.toggleFillButton()\n      else:\n          self.ui.pushButton_ToggleFill.toggle()\n          self.toggleFillButton()\n</code></pre></li> </ul>"}]}